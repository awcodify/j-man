// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRounds(t *testing.T) {
	t.Parallel()

	query := Rounds()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRoundsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoundsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Rounds().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoundsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoundSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoundsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RoundExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Round exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RoundExists to return true, but got false.")
	}
}

func testRoundsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	roundFound, err := FindRound(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if roundFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRoundsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Rounds().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRoundsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Rounds().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRoundsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roundOne := &Round{}
	roundTwo := &Round{}
	if err = randomize.Struct(seed, roundOne, roundDBTypes, false, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}
	if err = randomize.Struct(seed, roundTwo, roundDBTypes, false, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roundOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roundTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Rounds().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRoundsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	roundOne := &Round{}
	roundTwo := &Round{}
	if err = randomize.Struct(seed, roundOne, roundDBTypes, false, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}
	if err = randomize.Struct(seed, roundTwo, roundDBTypes, false, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roundOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roundTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func roundBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Round) error {
	*o = Round{}
	return nil
}

func roundAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Round) error {
	*o = Round{}
	return nil
}

func roundAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Round) error {
	*o = Round{}
	return nil
}

func roundBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Round) error {
	*o = Round{}
	return nil
}

func roundAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Round) error {
	*o = Round{}
	return nil
}

func roundBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Round) error {
	*o = Round{}
	return nil
}

func roundAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Round) error {
	*o = Round{}
	return nil
}

func roundBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Round) error {
	*o = Round{}
	return nil
}

func roundAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Round) error {
	*o = Round{}
	return nil
}

func testRoundsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Round{}
	o := &Round{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, roundDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Round object: %s", err)
	}

	AddRoundHook(boil.BeforeInsertHook, roundBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	roundBeforeInsertHooks = []RoundHook{}

	AddRoundHook(boil.AfterInsertHook, roundAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	roundAfterInsertHooks = []RoundHook{}

	AddRoundHook(boil.AfterSelectHook, roundAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	roundAfterSelectHooks = []RoundHook{}

	AddRoundHook(boil.BeforeUpdateHook, roundBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	roundBeforeUpdateHooks = []RoundHook{}

	AddRoundHook(boil.AfterUpdateHook, roundAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	roundAfterUpdateHooks = []RoundHook{}

	AddRoundHook(boil.BeforeDeleteHook, roundBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	roundBeforeDeleteHooks = []RoundHook{}

	AddRoundHook(boil.AfterDeleteHook, roundAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	roundAfterDeleteHooks = []RoundHook{}

	AddRoundHook(boil.BeforeUpsertHook, roundBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	roundBeforeUpsertHooks = []RoundHook{}

	AddRoundHook(boil.AfterUpsertHook, roundAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	roundAfterUpsertHooks = []RoundHook{}
}

func testRoundsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoundsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(roundColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Rounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoundsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoundsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoundSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoundsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Rounds().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	roundDBTypes = map[string]string{`ID`: `bigint`, `Name`: `text`, `Description`: `text`, `Users`: `bigint`, `RampUp`: `bigint`, `Duration`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`}
	_            = bytes.MinRead
)

func testRoundsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(roundPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(roundAllColumns) == len(roundPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roundDBTypes, true, roundPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRoundsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(roundAllColumns) == len(roundPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roundDBTypes, true, roundPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(roundAllColumns, roundPrimaryKeyColumns) {
		fields = roundAllColumns
	} else {
		fields = strmangle.SetComplement(
			roundAllColumns,
			roundPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RoundSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRoundsUpsert(t *testing.T) {
	t.Parallel()

	if len(roundAllColumns) == len(roundPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Round{}
	if err = randomize.Struct(seed, &o, roundDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Round: %s", err)
	}

	count, err := Rounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, roundDBTypes, false, roundPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Round: %s", err)
	}

	count, err = Rounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
